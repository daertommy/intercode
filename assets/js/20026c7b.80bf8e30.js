"use strict";(self.webpackChunkdoc_site=self.webpackChunkdoc_site||[]).push([[2167],{75631:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(3289);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),g=i,f=d["".concat(p,".").concat(g)]||d[g]||c[g]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9795:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(50744),i=(t(3289),t(75631));const a={id:"merge-users-input",title:"MergeUsersInput",hide_table_of_contents:!1},o=void 0,s={unversionedId:"graphql/inputs/merge-users-input",id:"graphql/inputs/merge-users-input",title:"MergeUsersInput",description:"Autogenerated input type of MergeUsers",source:"@site/docs/graphql/inputs/merge-users-input.mdx",sourceDirName:"graphql/inputs",slug:"/graphql/inputs/merge-users-input",permalink:"/docs/graphql/inputs/merge-users-input",draft:!1,editUrl:"https://github.com/neinteractiveliterature/intercode/edit/main/doc-site/docs/graphql/inputs/merge-users-input.mdx",tags:[],version:"current",frontMatter:{id:"merge-users-input",title:"MergeUsersInput",hide_table_of_contents:!1},sidebar:"sidebar",previous:{title:"MarkOrderPaidInput",permalink:"/docs/graphql/inputs/mark-order-paid-input"},next:{title:"MoneyInput",permalink:"/docs/graphql/inputs/money-input"}},p={},l=[{value:"Fields",id:"fields",level:3},{value:"<code>clientMutationId</code> (<code>String</code>)",id:"clientmutationid-string",level:4},{value:"<code>userIds</code> (<code>[ID!]</code>)",id:"userids-id",level:4},{value:"<code>winningUserConProfiles</code> (<code>[WinningUserConProfileInput!]!</code>)",id:"winninguserconprofiles-winninguserconprofileinput",level:4},{value:"<code>winningUserId</code> (<code>ID</code>)",id:"winninguserid-id",level:4}],u={toc:l};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Autogenerated input type of MergeUsers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"input MergeUsersInput {\n  clientMutationId: String\n  userIds: [ID!]\n  winningUserConProfiles: [WinningUserConProfileInput!]!\n  winningUserId: ID\n}\n")),(0,i.kt)("h3",{id:"fields"},"Fields"),(0,i.kt)("h4",{id:"clientmutationid-string"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("inlineCode",{parentName:"a"},"clientMutationId"))," (",(0,i.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/string"},(0,i.kt)("inlineCode",{parentName:"a"},"String")),")"),(0,i.kt)("p",null,"A unique identifier for the client performing the mutation."),(0,i.kt)("h4",{id:"userids-id"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("inlineCode",{parentName:"a"},"userIds"))," (",(0,i.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/id"},(0,i.kt)("inlineCode",{parentName:"a"},"[ID!]")),")"),(0,i.kt)("p",null,"The user IDs to merge."),(0,i.kt)("h4",{id:"winninguserconprofiles-winninguserconprofileinput"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("inlineCode",{parentName:"a"},"winningUserConProfiles"))," (",(0,i.kt)("a",{parentName:"h4",href:"/docs/graphql/inputs/winning-user-con-profile-input"},(0,i.kt)("inlineCode",{parentName:"a"},"[WinningUserConProfileInput!]!")),")"),(0,i.kt)("h4",{id:"winninguserid-id"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("inlineCode",{parentName:"a"},"winningUserId"))," (",(0,i.kt)("a",{parentName:"h4",href:"/docs/graphql/scalars/id"},(0,i.kt)("inlineCode",{parentName:"a"},"ID")),")"))}c.isMDXComponent=!0}}]);